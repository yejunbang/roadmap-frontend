TCP/IP五层协议模型
应用层--->传输层--->网络层--->数据链路层--->物理层
分别给数据加上：
Http报文->Htpp数据-->TCP首部+Http数据--->IP首部+TCP首部+Http数据----> 以太网首部+IP首部+TCP首部+Http数据

HTTP请求由状态行、请求头、请求正文三部分组成：
状态行：包括请求方式Method、资源路径URL、协议版本Version；
请求头：包括一些访问的域名、用户代理、Cookie等信息；
请求正文：就是HTTP请求的数据。


TCP是面向连接的可靠的
三次握手：
为的是保证client和server的接收和发送功能都没问题，
（第一次）client发送连接请求，此时处于连接等待状态，server接收到后回复一个ack（第二次），表示同意连接，此时也处于连接等待状态，
clent收到后就可以确认自己的发送和接收能力是没问题的，就建立了连接，但是server不知道自己的接收能力如何，需要client最后发送一次ack，（第三次）
server接收到后确认了自己的发送和接收能力没问题了，就建立了连接

第一次： 客户端发送一个同步序列（syn）给服务端，此时处于等待状态
第二次： 服务器收到同步序列后，回复一个ack和一个自己的同步序列，此时处于等待状态
第三次： 客户端收到ack和服务器的同步序列后，就建立连接，返回一个ack给服务器，服务器接收到后就建立连接

目的：为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误
比如说client发出的第一个连接请求报文段在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server，由于采用三次握手，
server确认并没有与client建立连接，而忽略这段报文



1 ) 主机A通过向主机B 发送一个含有同步序列号的标志位的数据段给主机B ,向主机B 请求建立连接,通过这个数据段,主机A告诉主机B 两件事:我想要和你通信;你可以用哪个序列号作为起始数据段来回应我
2 ) 主机B 收到主机A的请求后,用一个带有确认应答(ACK)和同步序列号(SYN)标志位的数据段响应主机A,也告诉主机A两件事:我已经收到你的请求了,你可以传输数据了;你要用序列号作为起始数据段来回应我
3 )主机A收到这个数据段后,再发送一个确认应答,确认已收到主机B 的数据段:"我已收到回复,我现在要开始传输实际数据了
3次握手就完成了,主机A和主机B 就可以传输数据


四次挥手：
可以是客户端，也可以是服务器进行四次挥手，比如主机1（client），主机2（server）
第一次：主机1向主机2发送请求，表示主机1已经没有数据要发给你了。
第二次：主机2回复一个ack，表示同意断开
第三次：主机2向主机1请求关闭连接，然后处于LAST-ACK 状态
第四次：主机1回复一个ack，表示同意断开，主机2收到后就关闭连接了，此时主机1等待一段时间还没得到回复后就判断主机2已经断开了，然后也进入关闭状态

目的：为了知道彼此都没有数据发送了。
第一次和第二次是主机1说我已经没有数据要发送给你了，主机2同意后，知道了主机1没有数据发送了，但是主机2还是可以发送数据给主机1，
第三次和第四次是主机2说我也没有数据要发送给你了，主机1知道后，彼此就知道了都没数据要发送了，就真正断开了。


TCP断开连接要进行4次
       1 ) 当主机A完成数据传输后,将控制位FIN置1,提出停止TCP连接的请求
       2 ) 主机B收到FIN后对其作出响应,确认这一方向上的TCP连接将关闭,将ACK置1
       3 ) 由B 端再提出反方向的关闭请求,将FIN置1
      4 ) 主机A对主机B的请求进行确认,将ACK置1,双方向的关闭结束.
由TCP的三次握手和四次断开可以看出,TCP使用面向连接的通信方式,大大提高了数据通信的可靠性,使发送数据端

ACK  TCP报头的控制位之一,对数据进行确认.确认由目的端发出,用它来告诉发送端这个序列号之前的数据段都收到了.比如,确认号为X,则表示前X-1个数据段都收到了,只有当ACK=1时,确认号才有效,当ACK=0时,确认号无效,这时会要求重传数据,保证数据的完整性.
SYN  同步序列号,TCP建立连接时将这个位置1
FIN  发送端完成发送任务位,当TCP完成数据传输需要断开时,提出断开连接的一方将这位置1